<div class="d-flex flex-row">  <div class="sticky">  <%- include("partials/sideBar.ejs") %>
</div>
<div class="container">
    <% if (locals.errorMessage) { %>
      <div class="alert alert-danger" role="alert">
          <%= locals.errorMessage %>
      </div>
      <% } %>
  <form class="rating" action="/updateBook" method="post">
      <div class="mb-3 mt-5">
        <label for="bookTitle" class="form-label">Book Title</label>
        <input value="<%= bookItem.title %>" name="bookTitle" placeholder="Write book Title" type="text" class="form-control" id="inputTitle" aria-describedby="emailHelp">
      </div>
      <div class="mb-3 ">
        <label for="bookAuthor" class="form-label">Author</label>
        <input value="<%= bookItem.author %>" name="bookAuthor" placeholder="Enter the book's author" type="text" class="form-control" id="inputAuthor" aria-describedby="emailHelp">
      </div>
      <div class="mb-3">
        <label for="ISBN" class="form-label">ISBN</label>
        <input value="<%= bookItem.isbn %>" name="ISBN" placeholder="Enter the book's ISBN" type="text" class="form-control" id="exampleInputPassword1">
    </div>
      <div class="mb-3">
          <label for="readDate" class="form-label">Read Date</label>
          <% const date = new Date(bookItem.date_read); %>
          <% const day = date.getDate().toString().padStart(2, '0');%> 
          <%  const month = (date.getMonth() + 1).toString().padStart(2, '0'); %>
          <% const year = date.getFullYear(); %>
          <% const fullDate = year+"-"+month+"-"+day%>
          <%= console.log(fullDate); %>
          <input value="<%= fullDate %>" name ="readDate" type="date" id="start" name="trip-start" />
        </div>
        <div class="mb-3">
          <label for="descriptionTextArea" class="form-label">Book Description</label>
          <textarea name="bookDescription" class="form-control" id="description" rows="3"><%= bookItem.description %></textarea>
        </div>
        <div class="mb-3">
          <label for="notesTextArea" class="form-label">Book Notes</label>
          <textarea name="bookNotes" class="form-control" id="notes" rows="10"><%= bookItem.book_notes %></textarea>
        </div>
     
        <label for="rating" class="form-label">Book Rating</label>
          <div class="rating__stars">
              <input id="rating-1" class="rating__input rating__input-1" type="radio" name="rating" value="1" <%= bookItem.rating == 1 ? 'checked' : '' %>>
              <input id="rating-2" class="rating__input rating__input-2" type="radio" name="rating" value="2" <%= bookItem.rating == 2 ? 'checked' : '' %>>
              <input id="rating-3" class="rating__input rating__input-3" type="radio" name="rating" value="3" <%= bookItem.rating == 3 ? 'checked' : '' %>>
              <input id="rating-4" class="rating__input rating__input-4" type="radio" name="rating" value="4" <%= bookItem.rating == 4 ? 'checked' : '' %>>
              <input id="rating-5" class="rating__input rating__input-5" type="radio" name="rating" value="5" <%= bookItem.rating == 5 ? 'checked' : '' %>>
              <label class="rating__label" for="rating-1">
                  <svg class="rating__star" width="32" height="32" viewBox="0 0 32 32" aria-hidden="true">
                      <g transform="translate(16,16)">
                          <circle class="rating__star-ring" fill="none" stroke="#000" stroke-width="16" r="8" transform="scale(0)" />
                      </g>
                      <g stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                          <g transform="translate(16,16) rotate(180)">
                              <polygon class="rating__star-stroke" points="0,15 4.41,6.07 14.27,4.64 7.13,-2.32 8.82,-12.14 0,-7.5 -8.82,-12.14 -7.13,-2.32 -14.27,4.64 -4.41,6.07" fill="none" />
                              <polygon class="rating__star-fill" points="0,15 4.41,6.07 14.27,4.64 7.13,-2.32 8.82,-12.14 0,-7.5 -8.82,-12.14 -7.13,-2.32 -14.27,4.64 -4.41,6.07" fill="#000" />
                          </g>
                          <g transform="translate(16,16)" stroke-dasharray="12 12" stroke-dashoffset="12">
                              <polyline class="rating__star-line" transform="rotate(0)" points="0 4,0 16" />
                              <polyline class="rating__star-line" transform="rotate(72)" points="0 4,0 16" />
                              <polyline class="rating__star-line" transform="rotate(144)" points="0 4,0 16" />
                              <polyline class="rating__star-line" transform="rotate(216)" points="0 4,0 16" />
                              <polyline class="rating__star-line" transform="rotate(288)" points="0 4,0 16" />
                          </g>
                      </g>
                  </svg>
                  <span class="rating__sr">1 star—Terrible</span>
              </label>
              <label class="rating__label" for="rating-2">
                  <svg class="rating__star" width="32" height="32" viewBox="0 0 32 32" aria-hidden="true">
                      <g transform="translate(16,16)">
                          <circle class="rating__star-ring" fill="none" stroke="#000" stroke-width="16" r="8" transform="scale(0)" />
                      </g>
                      <g stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                          <g transform="translate(16,16) rotate(180)">
                              <polygon class="rating__star-stroke" points="0,15 4.41,6.07 14.27,4.64 7.13,-2.32 8.82,-12.14 0,-7.5 -8.82,-12.14 -7.13,-2.32 -14.27,4.64 -4.41,6.07" fill="none" />
                              <polygon class="rating__star-fill" points="0,15 4.41,6.07 14.27,4.64 7.13,-2.32 8.82,-12.14 0,-7.5 -8.82,-12.14 -7.13,-2.32 -14.27,4.64 -4.41,6.07" fill="#000" />
                          </g>
                          <g transform="translate(16,16)" stroke-dasharray="12 12" stroke-dashoffset="12">
                              <polyline class="rating__star-line" transform="rotate(0)" points="0 4,0 16" />
                              <polyline class="rating__star-line" transform="rotate(72)" points="0 4,0 16" />
                              <polyline class="rating__star-line" transform="rotate(144)" points="0 4,0 16" />
                              <polyline class="rating__star-line" transform="rotate(216)" points="0 4,0 16" />
                              <polyline class="rating__star-line" transform="rotate(288)" points="0 4,0 16" />
                          </g>
                      </g>
                  </svg>
                  <span class="rating__sr">2 stars—Bad</span>
              </label>
              <label class="rating__label" for="rating-3">
                  <svg class="rating__star" width="32" height="32" viewBox="0 0 32 32" aria-hidden="true">
                      <g transform="translate(16,16)">
                          <circle class="rating__star-ring" fill="none" stroke="#000" stroke-width="16" r="8" transform="scale(0)" />
                      </g>
                      <g stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                          <g transform="translate(16,16) rotate(180)">
                              <polygon class="rating__star-stroke" points="0,15 4.41,6.07 14.27,4.64 7.13,-2.32 8.82,-12.14 0,-7.5 -8.82,-12.14 -7.13,-2.32 -14.27,4.64 -4.41,6.07" fill="none" />
                              <polygon class="rating__star-fill" points="0,15 4.41,6.07 14.27,4.64 7.13,-2.32 8.82,-12.14 0,-7.5 -8.82,-12.14 -7.13,-2.32 -14.27,4.64 -4.41,6.07" fill="#000" />
                          </g>
                          <g transform="translate(16,16)" stroke-dasharray="12 12" stroke-dashoffset="12">
                              <polyline class="rating__star-line" transform="rotate(0)" points="0 4,0 16" />
                              <polyline class="rating__star-line" transform="rotate(72)" points="0 4,0 16" />
                              <polyline class="rating__star-line" transform="rotate(144)" points="0 4,0 16" />
                              <polyline class="rating__star-line" transform="rotate(216)" points="0 4,0 16" />
                              <polyline class="rating__star-line" transform="rotate(288)" points="0 4,0 16" />
                          </g>
                      </g>
                  </svg>
                  <span class="rating__sr">3 stars—OK</span>
              </label>
              <label class="rating__label" for="rating-4">
                  <svg class="rating__star" width="32" height="32" viewBox="0 0 32 32" aria-hidden="true">
                      <g transform="translate(16,16)">
                          <circle class="rating__star-ring" fill="none" stroke="#000" stroke-width="16" r="8" transform="scale(0)" />
                      </g>
                      <g stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                          <g transform="translate(16,16) rotate(180)">
                              <polygon class="rating__star-stroke" points="0,15 4.41,6.07 14.27,4.64 7.13,-2.32 8.82,-12.14 0,-7.5 -8.82,-12.14 -7.13,-2.32 -14.27,4.64 -4.41,6.07" fill="none" />
                              <polygon class="rating__star-fill" points="0,15 4.41,6.07 14.27,4.64 7.13,-2.32 8.82,-12.14 0,-7.5 -8.82,-12.14 -7.13,-2.32 -14.27,4.64 -4.41,6.07" fill="#000" />
                          </g>
                          <g transform="translate(16,16)" stroke-dasharray="12 12" stroke-dashoffset="12">
                              <polyline class="rating__star-line" transform="rotate(0)" points="0 4,0 16" />
                              <polyline class="rating__star-line" transform="rotate(72)" points="0 4,0 16" />
                              <polyline class="rating__star-line" transform="rotate(144)" points="0 4,0 16" />
                              <polyline class="rating__star-line" transform="rotate(216)" points="0 4,0 16" />
                              <polyline class="rating__star-line" transform="rotate(288)" points="0 4,0 16" />
                          </g>
                      </g>
                  </svg>
                  <span class="rating__sr">4 stars—Good</span>
              </label>
              <label class="rating__label" for="rating-5">
                  <svg class="rating__star" width="32" height="32" viewBox="0 0 32 32" aria-hidden="true">
                      <g transform="translate(16,16)">
                          <circle class="rating__star-ring" fill="none" stroke="#000" stroke-width="16" r="8" transform="scale(0)" />
                      </g>
                      <g stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                          <g transform="translate(16,16) rotate(180)">
                              <polygon class="rating__star-stroke" points="0,15 4.41,6.07 14.27,4.64 7.13,-2.32 8.82,-12.14 0,-7.5 -8.82,-12.14 -7.13,-2.32 -14.27,4.64 -4.41,6.07" fill="none" />
                              <polygon class="rating__star-fill" points="0,15 4.41,6.07 14.27,4.64 7.13,-2.32 8.82,-12.14 0,-7.5 -8.82,-12.14 -7.13,-2.32 -14.27,4.64 -4.41,6.07" fill="#000" />
                          </g>
                          <g transform="translate(16,16)" stroke-dasharray="12 12" stroke-dashoffset="12">
                              <polyline class="rating__star-line" transform="rotate(0)" points="0 4,0 16" />
                              <polyline class="rating__star-line" transform="rotate(72)" points="0 4,0 16" />
                              <polyline class="rating__star-line" transform="rotate(144)" points="0 4,0 16" />
                              <polyline class="rating__star-line" transform="rotate(216)" points="0 4,0 16" />
                              <polyline class="rating__star-line" transform="rotate(288)" points="0 4,0 16" />
                          </g>
                      </g>
                  </svg>
                  <span class="rating__sr">5 stars—Excellent</span>
              </label>
             
          </div>
  
  
  
  
  
      <button type="submit" class="btn btn-primary mt-2">Edit Book</button>
    </form>
    
     
  
  
  </div>
  <style>
      * {
    border: 0;
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }
  
  :root {
    --bg: #e3e4e8;
    --fg: #17181c;
    --primary: #255ff4;
    --yellow: #f4a825;
    --yellow-t: rgba(244, 168, 37, 0);
    --bezier: cubic-bezier(0.42,0,0.58,1);
    --trans-dur: 0.3s;
  
  }
  
  
  
  .rating {
    margin: auto;
  }
  .rating__display {
    font-size: 1em;
    font-weight: 500;
    min-height: 1.25em;
    position: absolute;
    top: 100%;
    width: 100%;
    text-align: center;
  }
  .rating__stars {
    display: flex;
    padding-bottom: 0.375em;
    position: relative;
  }
  .rating__star {
    display: block;
    overflow: visible;
    pointer-events: none;
    width: 2em;
    height: 2em;
  }
  .rating__star-ring, .rating__star-fill, .rating__star-line, .rating__star-stroke {
    animation-duration: 1s;
    animation-timing-function: ease-in-out;
    animation-fill-mode: forwards;
  }
  .rating__star-ring, .rating__star-fill, .rating__star-line {
    stroke: var(--yellow);
  }
  .rating__star-fill {
    fill: var(--yellow);
    transform: scale(0);
    transition: fill var(--trans-dur) var(--bezier), transform var(--trans-dur) var(--bezier);
  }
  .rating__star-line {
    stroke-dasharray: 12 13;
    stroke-dashoffset: -13;
  }
  .rating__star-stroke {
    stroke: #c7cad1;
    transition: stroke var(--trans-dur);
  }
  .rating__label {
    cursor: pointer;
    padding: 0.125em;
  }
  .rating__label--delay1 .rating__star-ring, .rating__label--delay1 .rating__star-fill, .rating__label--delay1 .rating__star-line, .rating__label--delay1 .rating__star-stroke {
    animation-delay: 0.05s;
  }
  .rating__label--delay2 .rating__star-ring, .rating__label--delay2 .rating__star-fill, .rating__label--delay2 .rating__star-line, .rating__label--delay2 .rating__star-stroke {
    animation-delay: 0.1s;
  }
  .rating__label--delay3 .rating__star-ring, .rating__label--delay3 .rating__star-fill, .rating__label--delay3 .rating__star-line, .rating__label--delay3 .rating__star-stroke {
    animation-delay: 0.15s;
  }
  .rating__label--delay4 .rating__star-ring, .rating__label--delay4 .rating__star-fill, .rating__label--delay4 .rating__star-line, .rating__label--delay4 .rating__star-stroke {
    animation-delay: 0.2s;
  }
  .rating__input {
    position: absolute;
    -webkit-appearance: none;
    appearance: none;
  }
  .rating__input:hover ~ [data-rating]:not([hidden]) {
    display: none;
  }
  .rating__input-1:hover ~ [data-rating="1"][hidden], .rating__input-2:hover ~ [data-rating="2"][hidden], .rating__input-3:hover ~ [data-rating="3"][hidden], .rating__input-4:hover ~ [data-rating="4"][hidden], .rating__input-5:hover ~ [data-rating="5"][hidden], .rating__input:checked:hover ~ [data-rating]:not([hidden]) {
    display: block;
  }
  .rating__input-1:hover ~ .rating__label:first-of-type .rating__star-stroke, .rating__input-2:hover ~ .rating__label:nth-of-type(-n + 2) .rating__star-stroke, .rating__input-3:hover ~ .rating__label:nth-of-type(-n + 3) .rating__star-stroke, .rating__input-4:hover ~ .rating__label:nth-of-type(-n + 4) .rating__star-stroke, .rating__input-5:hover ~ .rating__label:nth-of-type(-n + 5) .rating__star-stroke {
    stroke: var(--yellow);
    transform: scale(1);
  }
  .rating__input-1:checked ~ .rating__label:first-of-type .rating__star-ring, .rating__input-2:checked ~ .rating__label:nth-of-type(-n + 2) .rating__star-ring, .rating__input-3:checked ~ .rating__label:nth-of-type(-n + 3) .rating__star-ring, .rating__input-4:checked ~ .rating__label:nth-of-type(-n + 4) .rating__star-ring, .rating__input-5:checked ~ .rating__label:nth-of-type(-n + 5) .rating__star-ring {
    animation-name: starRing;
  }
  .rating__input-1:checked ~ .rating__label:first-of-type .rating__star-stroke, .rating__input-2:checked ~ .rating__label:nth-of-type(-n + 2) .rating__star-stroke, .rating__input-3:checked ~ .rating__label:nth-of-type(-n + 3) .rating__star-stroke, .rating__input-4:checked ~ .rating__label:nth-of-type(-n + 4) .rating__star-stroke, .rating__input-5:checked ~ .rating__label:nth-of-type(-n + 5) .rating__star-stroke {
    animation-name: starStroke;
  }
  .rating__input-1:checked ~ .rating__label:first-of-type .rating__star-line, .rating__input-2:checked ~ .rating__label:nth-of-type(-n + 2) .rating__star-line, .rating__input-3:checked ~ .rating__label:nth-of-type(-n + 3) .rating__star-line, .rating__input-4:checked ~ .rating__label:nth-of-type(-n + 4) .rating__star-line, .rating__input-5:checked ~ .rating__label:nth-of-type(-n + 5) .rating__star-line {
    animation-name: starLine;
  }
  .rating__input-1:checked ~ .rating__label:first-of-type .rating__star-fill, .rating__input-2:checked ~ .rating__label:nth-of-type(-n + 2) .rating__star-fill, .rating__input-3:checked ~ .rating__label:nth-of-type(-n + 3) .rating__star-fill, .rating__input-4:checked ~ .rating__label:nth-of-type(-n + 4) .rating__star-fill, .rating__input-5:checked ~ .rating__label:nth-of-type(-n + 5) .rating__star-fill {
    animation-name: starFill;
  }
  .rating__input-1:not(:checked):hover ~ .rating__label:first-of-type .rating__star-fill, .rating__input-2:not(:checked):hover ~ .rating__label:nth-of-type(2) .rating__star-fill, .rating__input-3:not(:checked):hover ~ .rating__label:nth-of-type(3) .rating__star-fill, .rating__input-4:not(:checked):hover ~ .rating__label:nth-of-type(4) .rating__star-fill, .rating__input-5:not(:checked):hover ~ .rating__label:nth-of-type(5) .rating__star-fill {
    fill: var(--yellow-t);
  }
  .rating__sr {
    clip: rect(1px, 1px, 1px, 1px);
    overflow: hidden;
    position: absolute;
    width: 1px;
    height: 1px;
  }
  
  @media (prefers-color-scheme: dark) {
    :root {
      --bg: #17181c;
      --fg: #e3e4e8;
    }
  
    .rating {
      margin: auto;
    }
    .rating__star-stroke {
      stroke: #454954;;
    }
  }
  @keyframes starRing {
    from, 20% {
      animation-timing-function: ease-in;
      opacity: 1;
      r: 8px;
      stroke-width: 16px;
      transform: scale(0);
    }
    35% {
      animation-timing-function: ease-out;
      opacity: 0.5;
      r: 8px;
      stroke-width: 16px;
      transform: scale(1);
    }
    50%, to {
      opacity: 0;
      r: 16px;
      stroke-width: 0;
      transform: scale(1);
    }
  }
  @keyframes starFill {
    from, 40% {
      animation-timing-function: ease-out;
      transform: scale(0);
    }
    60% {
      animation-timing-function: ease-in-out;
      transform: scale(1.2);
    }
    80% {
      transform: scale(0.9);
    }
    to {
      transform: scale(1);
    }
  }
  @keyframes starStroke {
    from {
      transform: scale(1);
    }
    20%, to {
      transform: scale(0);
    }
  }
  @keyframes starLine {
    from, 40% {
      animation-timing-function: ease-out;
      stroke-dasharray: 1 23;
      stroke-dashoffset: 1;
    }
    60%, to {
      stroke-dasharray: 12 13;
      stroke-dashoffset: -13;
    }
  }
  </style>
  <script>
  
   
  
      window.addEventListener("DOMContentLoaded",() => {
      const starRating = new StarRating("form");
  });
  
  class StarRating {
      constructor(qs) {
          this.ratings = [
              {id: 1, name: "Terrible"},
              {id: 2, name: "Bad"},
              {id: 3, name: "OK"},
              {id: 4, name: "Good"},
              {id: 5, name: "Excellent"}
          ];
          this.rating = null;
          this.el = document.querySelector(qs);
  
          this.init();
      }
      init() {
          this.el?.addEventListener("change",this.updateRating.bind(this));
  
          // stop Firefox from preserving form data between refreshes
          try {
              this.el?.reset();
          } catch (err) {
              console.error("Element isn’t a form.");
          }
      }
      updateRating(e) {
          // clear animation delays
          Array.from(this.el.querySelectorAll(`[for*="rating"]`)).forEach(el => {
              el.className = "rating__label";
          });
  
          const ratingObject = this.ratings.find(r => r.id === +e.target.value);
          const prevRatingID = this.rating?.id || 0;
  
          let delay = 0;
          this.rating = ratingObject;
          this.ratings.forEach(rating => {
              const { id } = rating;
  
              // add the delays
              const ratingLabel = this.el.querySelector(`[for="rating-${id}"]`);
  
              if (id > prevRatingID + 1 && id <= this.rating.id) {
                  ++delay;
                  ratingLabel.classList.add(`rating__label--delay${delay}`);
              }
  
              // hide ratings to not read, show the one to read
              const ratingTextEl = this.el.querySelector(`[data-rating="${id}"]`);
  
              if (this.rating.id !== id){
                  console.log(ratingObject.id);
                  let userRating = ratingObject.id;
              }
                  
          });
      }
  }
  
      
  
  
  </script>